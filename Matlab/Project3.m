%% ECE 610 - Project 3
%% Distributed Generation System

%% This project aims to simulate a power plant along with a distributed generator unit. The
%% figure below shows a diagram of a steam turbine system employed in a power plant.
%% Notice that the steam turbine is connected to a synchronous generator through a gear
%% box. Such a generator is connected to an industry represented here as an RL load (100
%% KW - power factor equal to 1). Since this power system products pollution while
%% generating electricity, a distributed generation system with wind turbines and 
%% photovoltaic panels are installed at the load side to reduce the gas emission from the
%% power plant. For simplication purposes, such a distributed generation is represented by
%% a battery connected to a controlled voltage source and a low-pass filter.

%% Specify the converter employed in the distributed generation unit able to generate half
%% of the load power. Simulate the system constituted by the synchronous generator
%% (assume a constant torque furnished by the gear box), load and distributed generation
%% (battery, dc-ac converter, and low-pass-filter). The voltage generated by the distributed
%% generator must be in phase with the voltage at the output of the synchronous generator
%% as well as must have the same amplitude of vas, vbs, and vcs before connecting it in 
%% parallel.

close all
clear all

% Variables for Synchronous generator

Vs = 1211/sqrt(2);   %% Initial value of V

rs = 0.00243;       %% Define 

Xls = 0.1538;       
Xq = 1.457;
Xmq = Xq - Xls;
Xd = 1.457;
Xmd = Xd - Xls;
rkq1 = 0.00144;
rfd = 0.00075;
Xlkq1 = 0.6578;
Xkq1 = Xlkq1 + Xmq;
Xlfd = 0.1145;
Xfd = Xlfd + Xmd;
rkq2 = 0.00681;
rkd = 0.01080;
Xlkq2 = 0.07062;
Xkq2 = Xlkq2 + Xmq;
Xlkd = 0.06577;
Xkd = Xlkd + Xmd;  

p = 2;              %% Number of poles

theta = 0;          %% Initial theta of 0
omega_e = 120*pi;   %% Electrical Speed in rads/sec
omega_r = 120*pi;   %% Mechanical Speed in rads/sec

t=0;                %% Start taking data from t = 0 seconds
tmax=0.1;           %% Stop at t = 0.1 seconds
h=1e-6;             % step size is 1 microsecond
j=0;                % Array index variable

%% Define our K reference frame matrix
Ks(1,:) = [cos(theta), cos(theta-2*pi/3), cos(theta+2*pi/3)];       
Ks(2,:) = [sin(theta), sin(theta-2*pi/3), sin(theta+2*pi/3)];
Ks(3,:) = [1/2, 1/2, 1/2];
Ks = (2/3)*Ks;              %% Reference frame Matrix


%% Now to define initial values for Vabc, Iabc, Vqdo, and Iqdo. 
Vabcs(1,1) = sqrt(2)*Vs*cos(omega_e*t);
Vabcs(2,1) = sqrt(2)*Vs*cos(omega_e*t-2*pi/3);
Vabcs(3,1) = sqrt(2)*Vs*cos(omega_e*t+2*pi/3);

Vqdos = Ks * Vabcs;
Vkq1 = 0;       %%??
Vkq2 = 0;
exfd = 1;
Vkd = 0;

%% Define a vector for our reference currents (used in eq 5.5-38)
Vref(1,1) = Vqdos(1,1);        
Vref(2,1) = Vqdos(2,1);
Vref(3,1) = Vqdos(3,1);
Vref(4,1) = Vkq1;
Vref(5,1) = Vkq2;
Vref(6,1) = exfd;
Vref(7,1) = Vkd;

%% Need to build our impedance matrix to find the currents
Zref(1,:) = [rs+(p/omega_e)*Xq, (omega_r/omega_e)*Xd, 0, (p/omega_e)*Xmq, (p/omega_e)*Xmq, (omega_r/omega_e)*Xmd, (omega_r/omega_e)*Xmd];
Zref(2,:) = [-(omega_r/omega_e)*Xq, rs+(p/omega_e)*Xd, 0, -(omega_r/omega_e)*Xmq, -(omega_r/omega_e)*Xmq, (p/omega_e)*Xmd, (p/omega_e)*Xmd];
Zref(3,:) = [0, 0, rs+(p/omega_e)*Xls, 0, 0, 0, 0];
Zref(4,:) = [(p/omega_e)*Xmq, 0, 0, rkq1+(p/omega_e)*Xkq1, (p/omega_e)*Xmq, 0, 0];
Zref(5,:) = [(p/omega_e)*Xmq, 0, 0, (p/omega_e)*Xmq, rkq2+(p/omega_e)*Xkq2, 0, 0];
Zref(6,:) = [0, (Xmd/rfd)*(p/omega_e)*Xmd, 0, 0, 0, (Xmd/rfd)*(rfd+(p/omega_e)*Xfd), (Xmd/rfd)*(p/omega_e)*Xmd];
Zref(7,:) = [0, (p/omega_e)*Xmd, 0, 0, 0, (p/omega_e)*Xmd, rkd+(p/omega_e)*Xkd];

%% Need to build our reactance matric to find the flux linkages
Xref(1,:) = [Xq, 0, 0, Xmq, Xmq, 0, 0];
Xref(2,:) = [0, Xd, 0, 0, 0, Xmd, Xmd];
Xref(3,:) = [0, 0, Xls, 0, 0, 0, 0];
Xref(4,:) = [Xmq, 0, 0, Xkq1, Xmq, 0, 0];
Xref(5,:) = [Xmq, 0, 0, Xmq, Xkq2, 0, 0];
Xref(6,:) = [0, Xmd, 0, 0, 0, Xfd, Xmd];
Xref(7,:) = [0, Xmd, 0, 0, 0, Xmd, Xkd];

%% Use the above matrices to solve for the reference frame currents
Iref = inv(Zref)*Vref;

%% Use the above matrices to solve for the reference frame flux linkages
PhiRef = Xref*Iref;

%% Pull the elements out of the above matrix for Iqdos
Iqdos(1,1) = Iref(1,1);
Iqdos(2,1) = Iref(2,1);
Iqdos(3,1) = Iref(3,1);

%% Use the vector above to solve for the currents at the output of the generator
Iabcs = inv(Ks)*Iqdos;

%% RLC filter variables definition

rfilter = 50;       %% Filter resistance
cfilter = 1e-4;     %% Capacitor value for LC filter
lfilter = (1/(120*pi*sqrt(cfilter)))^2;     %% Inductance of LC filter

%% Initialize Vprime for calculation of output of second order filter
Vouta_prime = 0;
Voutb_prime = 0;
Voutc_prime = 0;

%% Distributed Generator Variables declaration

teta1=0;            %% 
w1=2*pi*60;
tpwm=0;
Ts=100e-6;          %switching period (fs=10kHz)

%% Initialize currents for the output of Distributed Generator system to 0
ias_dist=0;     
ibs_dist=0;
ics_dist=0;

%% Battery at input of Distributed Generator system is 1.105*Vs
Vdc=0.783*Vs;

%% Initialize output voltages of distributed generator unit Vout_abc to 0  
Vouta_dist = 0;
Voutb_dist = 0;
Voutc_dist = 0;

%% Defining Resistive load
Rload=17.3;                 %% Load is in Ohms

%% Now to enter our loop and fill in the vectors we want to plot
while t <= tmax
    
    %% We want vqs, vds, iqs, ids, P and the mechanical speeed as a function of time
    
    %% Take next step through our iteration, increment t, theta    
    t = t + h;
    theta = theta+omega_r*h;
    
    %% Recalculate Vabcs, Iabcs, Vqdos, and Iqdos, as well as Ks   
    Ks(1,:) = [cos(theta), cos(theta-2*pi/3), cos(theta+2*pi/3)];
    Ks(2,:) = [sin(theta), sin(theta-2*pi/3), sin(theta+2*pi/3)];   
    Ks(3,:) = [1/2, 1/2, 1/2];
    Ks = (2/3)*Ks;              %% Reference frame Matrix


    %% Now to define the next values for Vabc, Iabc, Vqdo, and Iqdo. 

    Vabcs(1,1) = sqrt(2)*Vs*cos(omega_e*t);
    Vabcs(2,1) = sqrt(2)*Vs*cos(omega_e*t-2*pi/3);
    Vabcs(3,1) = sqrt(2)*Vs*cos(omega_e*t+2*pi/3);

    Vqdos = Ks * Vabcs;
    Vkq1 = 0;
    Vkq2 = 0;
    exfd = 10;
    Vkd = 0;

    Vref(1,1) = Vqdos(1,1);        
    Vref(2,1) = Vqdos(2,1);
    Vref(3,1) = Vqdos(3,1);
    Vref(4,1) = Vkq1;
    Vref(5,1) = Vkq2;
    Vref(6,1) = exfd;
    Vref(7,1) = Vkd;

    Iref = inv(Zref)*Vref;

    PhiRef = Xref*Iref;

    Iqdos(1,1) = Iref(1,1);
    Iqdos(2,1) = Iref(2,1);
    Iqdos(3,1) = Iref(3,1);

    Iabcs = inv(Ks)*Iqdos;
       
    % Distributed generator and filter
 
     vas_ref = Vabcs(1,1)/2;
     vbs_ref = Vabcs(2,1)/2;
     vcs_ref = Vabcs(3,1)/2;
    
    %Begin of the pwm loop simulation (interruption)
    
    if t>tpwm,
        
        tpwm=tpwm+Ts;
        
        cont=0;
        
        tal1=(vas_ref/Vdc+0.5)*Ts;
        tal2=(vbs_ref/Vdc+0.5)*Ts;        
        tal3=(vcs_ref/Vdc+0.5)*Ts;
        
    end
    %End of the pwm loop simulation

    cont=cont+h;

    %Begin simulation of the converter
    if (cont<tal1)
        q1=1;
    else
        q1=0;
    end    
    if (cont<tal2)
        q2=1;
    else
        q2=0;
    end     
    if (cont<tal3)
        q3=1;
    else
        q3=0;
    end     

    %Definition of the pole voltages
    v10 = (2*q1-1)*(Vdc/2);
    v20 = (2*q2-1)*(Vdc/2);
    v30 = (2*q3-1)*(Vdc/2);
    
    vn0 = (1/3)*(v10+v20+v30);
    
    %Phase voltages applied to the stator of the machine
    vas = v10 - vn0;
    vbs = v20 - vn0;
    vcs = v30 - vn0;
     
    Vouta_prime = Vouta_prime + h*(v10*rfilter-Vouta_dist*rfilter-Vouta_prime*lfilter)/(rfilter*lfilter*cfilter);
    Voutb_prime = Voutb_prime + h*(v20*rfilter-Voutb_dist*rfilter-Voutb_prime*lfilter)/(rfilter*lfilter*cfilter);
    Voutc_prime = Voutc_prime + h*(v30*rfilter-Voutc_dist*rfilter-Voutc_prime*lfilter)/(rfilter*lfilter*cfilter);
    
    Vouta_dist = Vouta_dist + Vouta_prime*h;
    Voutb_dist = Voutb_dist + Voutb_prime*h;
    Voutc_dist = Voutc_dist + Voutc_prime*h;
    
    ias_dist = Vouta_dist/Rload;
    ibs_dist = Voutb_dist/Rload;
    ics_dist = Voutc_dist/Rload;
    
    Pow_sync = (Vabcs(1,1)*Iabcs(1,1)+Vabcs(2,1)*Iabcs(2,1)+Vabcs(3,1)*Iabcs(3,1));
    Pow_dist = Vouta_dist*ias_dist+Voutb_dist*ibs_dist+Voutc_dist*ics_dist;
    
    iaout=ias_dist+Iabcs(1,1);
    ibout=ibs_dist+Iabcs(2,1);
    icout=ics_dist+Iabcs(3,1);
    
    % Voltages,currents and Power of RL load
    
    Varl = iaout*Rload;
    Vbrl = ibout*Rload;
    Vcrl = icout*Rload;
   
    Pow_tot = Pow_sync + Pow_dist;
    
    %% Power factor
     Pow_Factor = Pow_tot/(3*Varl*iaout);
 
     %% Store the variables
    
    j = j + 1;
    
    time(j)=t;
    
    %% Plots for output of the synchronus generator
    
    %% Fill in vector for Vabcs (output of synchronous generator)
    Vas(j) = Vabcs(1,1);
    Vbs(j) = Vabcs(2,1);
    Vcs(j) = Vabcs(3,1);
    
    %% Fill in vector for Vqdos (reference variables for output of generator)
    Vqs(j) = Vqdos(1,1);
    Vds(j) = Vqdos(2,1);
    Vos(j) = Vqdos(3,1);
    
    %% Fill in vector for Iqdos (reference variables for output of generator)
    Iqs(j) = Iqdos(1,1);
    Ids(j) = Iqdos(2,1);
    Ios(j) = Iqdos(3,1);   
    
    %% Fill in vector for Iabcs (output for generator)
    Ias(j) = Iabcs(1,1);
    Ibs(j) = Iabcs(2,1);
    Ics(j) = Iabcs(3,1);
    
    %% Fill in vector for real power and torque (output for generator)
    Power_Sync(j) = Pow_sync;
    Power_Dist(j) = Pow_dist;
        
    %% Plots for output of the distributed generation system
    
    voltage_as(j)=vas;
    voltage_bs(j)=vbs;
    voltage_cs(j)=vcs;    

    voltage_as_ref(j)=vas_ref;
    voltage_bs_ref(j)=vbs_ref;
    voltage_cs_ref(j)=vcs_ref;       
    
    current_as(j)=ias_dist;
    current_bs(j)=ibs_dist;
    current_cs(j)=ics_dist;
    
    pole_v10(j)=v10;
    pole_v20(j)=v20;
    pole_v30(j)=v30;
    
    voutas(j)=Vouta_dist;
    voutbs(j)=Voutb_dist;
    voutcs(j)=Voutc_dist;
    
    Vaload(j)=Varl;
    Vbload(j)=Vbrl;
    Vcload(j)=Vcrl;
    
    Ia(j)=iaout;
    Ib(j)=ibout;
    Ic(j)=icout;
    
    Power_Tot(j)=Pow_tot;
    Power_Factor(j)=Pow_Factor;
       
end

% Plots of Synchronous generator

figure(1),plot(time,Ias,time,Ibs,time,Ics)
title('Current at output of Synchronous Generator'),xlabel('time (s)'),ylabel('current Iabcs (A)')

figure(2),plot(time,Iqs,time,Ids,time,Ios)
title('Transformed current at output of Synchronous Generator'),xlabel('time (s)'),ylabel('current Iqdos (A)')

figure(3),plot(time,Vqs,time,Vds,time,Vos)
title('Transformed voltage at output of Synchronous Generator'),xlabel('time (s)'),ylabel('voltage Vqdos (V)')

figure(4),plot(time,Vas,time,Vbs,time,Vcs)
title('Voltage at output of Synchronous Generator'),xlabel('time (s)'),ylabel('voltage Vabcs (V)')

figure(5),plot(time,Power_Sync)
title('Power at output of Synchronous Generator'),xlabel('time (s)'),ylabel('power (W)')
axis([0, 0.1, 0, 1e5])

% Plots of Distributed generator and Low Pass filter

figure(6),plot(time,voltage_as_ref,time,voltage_bs_ref,time,voltage_cs_ref)
title('Reference voltages for distributed generation system'),xlabel('time (s)'),ylabel('voltage Vabc_ref (V)')

figure(7),plot(time,pole_v10,time,pole_v20,time,pole_v30)
title('Pole voltages for distributed generation system'),xlabel('time (s)'),ylabel('voltage V1230 (V)')

figure(8),plot(time,voltage_as,time,voltage_bs,time,voltage_cs)
title('Standalone voltages for DG system'),xlabel('time (s)'),ylabel('voltage Vabcs (V)')

figure(9),plot(time,current_as,time,current_bs,time,current_cs)
title('Current at output of lowpass filter'),xlabel('time (s)'),ylabel('Current Iabcs (A)')

figure(10),plot(time,voutas,time,voutbs,time,voutcs)
title('Voltage at output of lowerpass filter'),xlabel('time (s)'),ylabel('Voltage Vabcs (V)')

figure(11),plot(time,Power_Dist)
title('Power at output of lowpass filter'),xlabel('time (s)'),ylabel('Current Iabcs (A)')

%Plots of RL load

figure(12),plot(time,Vaload,time,Vbload,time,Vcload)
title('Load Voltage'),xlabel('time (s)'),ylabel('Voltage (V)')

figure(13),plot(time,Ia,time,Ib,time,Ic)
title('Load Current'),xlabel('time (s)'),ylabel('Current (A)')

figure(14),plot(time,Power_Tot)
title('Load Power'),xlabel('time (s)'),ylabel('Power (W)')
grid on

figure(15),plot(time,Vaload,time,Ia)
title('Phase A load voltage and current'),xlabel('time (s)'),ylabel('Load Voltage (V) Load Current (A)')
